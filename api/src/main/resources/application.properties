spring.application.name=apirestfulv1

spring.datasource.url=jdbc:mysql://localhost:3306/desweb-09-11
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# HikariCP Configurações
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.transaction-isolation=2

# 0 - Read Uncommited
# 1 - Repeatable Read
# 2 - Repeatable read
# 3 - Serializable

#-------------------------------------------------------------------------------------------
#                        | Read Uncommited | Read Commited | Repeatable Read | Serializable
#-------------------------------------------------------------------------------------------
# Dirty read             |      Sim        |     Não       |      Não        |      Não
# -----------------------------------------------------------------------------------------
# Non repeatable read    |      Sim        |     Sim       |      Não        |      Não
#-------------------------------------------------------------------------------------------
# Phanton read           |      Sim        |     Sim       |      Não        |      Não
#-------------------------------------------------------------------------------------------
# Serialization anomally |      Sim        |     Sim       |      Sim        |      Não
#-------------------------------------------------------------------------------------------

# Dirty read - Ler informação não comitada
# Non repeatable read - Quando, em uma transação, uma linha é recuperada duas vezes e os valores na linha são diferentes.
# Phanton read - Quando, em uma transação, duas buscas idênticas são executadas e as linhas recuperadas pela segunda
#                busca são diferentes das linhas recuperadas pela primeira busca.
# Serialization anomally - Quando duas transações que acessam os mesmos dados precisam ser executadas sequencialmente
#                          para o resultado final ser correto.
#                          Exemplo: transferência de fundos da conta 123 para 345 e da conta 123 para 543.
#                          Ambas as transações podem ler o saldo da conta 123 levando-as a acreditar que é possível
#                          retirar o seu respectivo montante.
#                          Solução: executar ambas as transações em série.

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
# dropa e cria em seguida

server.port=8080